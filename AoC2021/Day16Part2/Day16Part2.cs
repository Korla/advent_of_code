using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;

namespace AoC2021.Day16Part2;

public class Day16Part2
{
    private long Run(IList<string> data)
    {
        var map = new Dictionary<char, string>
        {
            {'0', "0000"},
            {'1', "0001"},
            {'2', "0010"},
            {'3', "0011"},
            {'4', "0100"},
            {'5', "0101"},
            {'6', "0110"},
            {'7', "0111"},
            {'8', "1000"},
            {'9', "1001"},
            {'A', "1010"},
            {'B', "1011"},
            {'C', "1100"},
            {'D', "1101"},
            {'E', "1110"},
            {'F', "1111"}
        };
        var binaryString = string.Join("", data.First().Select(c => map[c]));// 111 000 0 001010010100111 0100011000000000100101100000000000101010111100101001101001100101100101001101001100101100100010111001001100000000001111101101001000111000100011001110111010111011001001010001111010100010101010000000010000110011100001001001001001110110110101000110100000001011001100011111011011011001111110111100110011110101000000000000101010111001101010110011011100010000000001000000011100111100000100010010011010111001001101100111100100110000000111000110000000001011010100000000001111100001001011110100100001110010101111001111001000111100101100001101010010100101011110111100111110000010100110000000001000010010001111011101111000100100110011011000000000011001101100001000000000111101000111011010000100000100000100000001000000000111001000100010010000100010100001100110110000000000011111110100110101110011001111000010110100000000000001001010011001001010101100100000011110001110111001100000000101010100110110010110010011011001100111001101100110010100111010100100110001000000011000000000100111110010000111001100110010000000010001111000100111011100011111111111000011110011101110110000000110001100001010100000000001001001100000000001111011000000010101001011100010000000000101001010000000000110000110000000000100000100000001000001100000110000000011110000000010000000001101101001100110000000000110101110000000000110000010000000000101001110000000000100101100000000011111001100110000000001100110000001000000000101000011001110000000000110100110000000000111001110000000000100110010110111011001100100110001000000001010010011011100000000011010101100001000000000111011000111111110001000110100001101010000000000000100001011100010010011000011001110001011001100111111010110000101001011000011111000000000001001110100100110000000001110110000010000100010111011000111100000100000000001000010001000011010010000011010100011001110011000000000111011000010111110001111000100011111110100000000001101110001100101101100111100011001101001100111101010101001001001101000100100101101001011000110010000110110011101011010000011000000000100111100000000001100110000000100000000011111100000101111000110111010000101101000100000000011010100010000111000111001010000101110100101101001110000111000100111000100000000011001001111001111110100100111110000110010111000000000010111110010011100011100111001001011100101011001000001101100000101010001000000000011101001111011110100100010100100110000000000110110001011010001100000000010011100100111000001010110110000000000010101010110011101101001000100000001100100100001111100100000000010101100011101000000000101011001011000001110100101111110110000111111001011010000001111000010010000110000000001000110110000000001000110011010001111101001101000111111100101011111110100111010111111100100000000010011001011001110110001010010111101000000000101111001100101011101100110011001001110101001000000000110000001110010100111101111110010100101001011010011000101101000000000100001001000100011111100100010001101100110000000001110110011001000011101001110000100001100110000011111100110000000001011110011101001110001110000000000100101100100111011000100011011100110010110000000010000000010001010010001111111100101100111100000111111001111001010110100111011000011000111001001110001111010011010000110000000001001010010110010110001001101001011101000100000000101100100101111000110101101011101111000001010011001001011010010000001001010100000101100100101010100111010100101101001010010111010000000001100000000011001001101000000101010011011000001111001001110101010000101001011111110100000111101010010011100101101001010111001000000001000001100110110000000001001110010110100111011010010101010010101010010110100111011010010101010010110110011010101101111011101111011111100010110001100000000010101101100000000010001100111111111000101101100010100011001001010010000000111001110110111111011011101111010001000000000111010011110011001011110101011000000000101101001001111000000101111001010011101101111111010111110011100110100100001111100110001100100110111101100100000000100011001011001001001110100101000000000110011011100010000000001111110001011010100011100111000111111100010000000001110110000010100100001011111000010111001000000000001000001101001110010111000100101000101101010011001100011111100010001100110101100011100100010010100001010000000001111010001001010100110001000100100111100010001010011000000000101111001010111010000010101101000000000101111001101010111110001110111010110011011110011010001001000110100100110000000001010110001100110111100000000010100100100011001010000000011001001000110010100000000111001110000000001100110000110101100110001011111001101101100010000100010010000110010010100101111110110100011100110110111111001010100001100000010000000001010110000100101001001011011101000101000110110000000001011110010110001010111001010010001000100001001010010011110010101001110011011000010001001111010110111011101110100110111011010001100110110010000100000000100101101101001101011000111100001010110110000000001011100000000000001000011001000110010010001011110100010101110001000000000111001000100010110000010010100010011010011000000000111010001000000000111011000010001010001011100100001100000001000000000111101000110101010001100000100010111110000000000000100001001100011000011000101101110000110011000100000000011001100001010101001101001010000100100011100010000111011101111011001011001001101011111110101110110001001000101001011010001101111000001000000
        var current = 0;
        return RecRead();

        long RecRead()
        {
            var version = ReadInt(3);
            var packetTypeId = ReadInt(3);
            if (packetTypeId == 4) return ReadLiteralValue();
            var subPackets = ReadInt(1) == 0 ? HandleType15() : HandleType11();
            return packetTypeId switch
            {
                0 => subPackets.Sum(),
                1 => subPackets.Aggregate((product, curr) => product * curr),
                2 => subPackets.Min(),
                3 => subPackets.Max(),
                5 => subPackets[0] > subPackets[1] ? 1 : 0,
                6 => subPackets[0] < subPackets[1] ? 1 : 0,
                7 => subPackets[0] == subPackets[1] ? 1 : 0,
                _ => ReadLiteralValue()
            };
        }

        List<long> HandleType15()
        {
            var lengthOfSubpackets = ReadInt(15);
            var endOfPacket = current + lengthOfSubpackets;

            var result = new List<long>();
            while (current != endOfPacket)
            {
                result.Add(RecRead());
            }
            return result;
        }

        List<long> HandleType11()
        {
            var numberOfSubpackets = ReadInt(11);
            var result = new List<long>();
            for (var i = 0; i < numberOfSubpackets; i++)
            {
                result.Add(RecRead());
            }
            return result;
        }

        long ReadLiteralValue()
        {
            bool continueReading;
            var value = "";
            do
            {
                continueReading = ReadInt(1) == 1;
                value += ReadBinary(4);
            } while (continueReading);

            return Convert.ToInt64(value, 2);
        }

        long ReadInt(int length)
        {
            var readBinary = ReadBinary(length);
            return Convert.ToInt64(readBinary, 2);
        }

        string ReadBinary(int length) => binaryString[current..(current += length)];
    }

    private class Tests
    {
        [Theory]
        [TestCase("C200B40A82", 3)]
        [TestCase("04005AC33890", 54)]
        [TestCase("880086C3E88112", 7)]
        [TestCase("CE00C43D881120", 9)]
        [TestCase("D8005AC2A8F0", 1)]
        [TestCase("F600BC2D8F", 0)]
        [TestCase("9C005AC2F8F0", 0)]
        [TestCase("9C0141080250320F1802104A08", 1)]
        public void TestData(string input, long expected)
        {
            var sut = new Day16Part2();
            Assert.AreEqual(expected, sut.Run(new List<string> { input }));
        }
    
        [Test]
        public void Data()
        {
            var data = File.ReadAllLines(@"Day16Part2/data.txt");
            var sut = new Day16Part2();
            Assert.AreEqual(3408662834145, sut.Run(data));
        }
    }
}